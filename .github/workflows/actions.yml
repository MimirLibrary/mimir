name: CI
on:
  push:
    branches:
      - main
  pull_request:

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_BRANCH: ${{ github.head_ref }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  main:
    runs-on: ubuntu-latest
    environment: Staging
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout [main]
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache node_modules/
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm install

      - run: npx nx-cloud start-ci-run
      - run: npx env-cmd -f .staging.env npx nx affected --target=build --parallel --max-parallel=3
      - run: npx env-cmd -f .staging.env npx nx affected --target=test --parallel --max-parallel=2

        # Deploy part:
      - run: npx env-cmd -f .staging.env npx nx build frontapp:build:production
      - run: npx env-cmd -f .staging.env npx nx build apiserver:build:production --parallel --max-parallel=3
        # Generate prisma client
      - run: cd packages/metadata-service && npx prisma generate && cd -
      - run: npx env-cmd -f .staging.env npx nx build metadata-service:build:production

      - run: npx nx-cloud stop-all-agents

      - name: Rsync copy web
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -avzr --delete --chown=www-data:www-data
          path: dist/packages/frontapp/
          remote_path: /srv/www
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          remote_key_pass: ${{ secrets.SSH_PASSPHRASE }}

      - name: Rsync copy apiserver
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -avzr --delete --chown=www-data:www-data
          path: dist/packages/apiserver/
          remote_path: /srv/apiserver
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          remote_key_pass: ${{ secrets.SSH_PASSPHRASE }}

      - name: Rsync copy metadata-service
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -avzr --delete --chown=www-data:www-data
          path: dist/packages/metadata-service/
          remote_path: /srv/metadata
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          remote_key_pass: ${{ secrets.SSH_PASSPHRASE }}

      - name: Run scripts on remote
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            source ~/.nvm/nvm.sh
            nvm use 16
            cd /srv/apiserver/
            npm i --force
            export POSTGRES_USER=${{ secrets.DB_USER }}
            export POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            pm2 restart apisrv

  pr:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache node_modules/
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm install

      - run: npx nx-cloud start-ci-run
      - run: npx nx affected --target=build --parallel --max-parallel=3
      - run: npx nx affected --target=test --parallel --max-parallel=2
      - run: npx nx-cloud stop-all-agents
  agents:
    runs-on: ubuntu-latest
    name: Agent 1
    timeout-minutes: 60
    strategy:
      matrix:
        agent: [1, 2, 3]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'
      - run: npm install
      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
